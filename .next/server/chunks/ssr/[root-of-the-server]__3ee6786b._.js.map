{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_59dee874.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"inter_59dee874-module__9CtR0q__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_59dee874.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22inter%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inter', 'Inter Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/joaosantos/Documents/Tutoring/src/components/top-nav.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TopNav = registerClientReference(\n    function() { throw new Error(\"Attempted to call TopNav() from the server but TopNav is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/top-nav.tsx <module evaluation>\",\n    \"TopNav\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,4DACA","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Users/joaosantos/Documents/Tutoring/src/components/top-nav.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const TopNav = registerClientReference(\n    function() { throw new Error(\"Attempted to call TopNav() from the server but TopNav is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/top-nav.tsx\",\n    \"TopNav\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,wCACA","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/joaosantos/Documents/Tutoring/src/lib/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr'\n\n// Define a function to create a Supabase client for browser environments\nexport function createClient() {\n  // Ensure the environment variables are loaded\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase URL or Anon Key in environment variables.');\n  }\n\n  // Create and return the Supabase client\n  // We use createBrowserClient for client-side usage.\n  // For server-side usage (API routes, Server Components), we'd use createServerClient.\n  return createBrowserClient(\n    supabaseUrl,\n    supabaseAnonKey\n  );\n} "],"names":[],"mappings":";;;AAAA;AAAA;;AAGO,SAAS;IACd,8CAA8C;IAC9C,MAAM;IACN,MAAM;IAEN,uCAAsC;;IAEtC;IAEA,wCAAwC;IACxC,oDAAoD;IACpD,sFAAsF;IACtF,OAAO,CAAA,GAAA,0KAAA,CAAA,sBAAmB,AAAD,EACvB,aACA;AAEJ","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/joaosantos/Documents/Tutoring/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { createClient } from '@/lib/supabase/client';\n\n// Define the shape of our profile data\nexport interface UserProfile {\n  id: string;\n  name: string | null;\n  role: 'STUDENT' | 'TUTOR' | null;\n  avatar_url: string | null;\n  // Add other profile fields as needed\n}\n\n// Define the shape of our context data\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  profile: UserProfile | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n}\n\n// Create the context with a default value\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Export the provider component\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const supabase = createClient();\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    console.log(\"AuthContext: useEffect started.\"); // Log start\n\n    // Function to fetch session and profile\n    const fetchSessionAndProfile = async () => {\n      console.log(\"AuthContext: fetchSessionAndProfile started.\");\n      setLoading(true); // Ensure loading is true at the start\n      setError(null); // Assuming you might add an error state\n\n      try {\n        console.log(\"AuthContext: Fetching session...\");\n        const { data: { session: currentSession }, error: sessionError } = await supabase.auth.getSession();\n        console.log(\"AuthContext: Session data:\", currentSession);\n        if (sessionError) {\n          console.error(\"AuthContext: Error fetching session:\", sessionError);\n          setSession(null);\n          setUser(null);\n          setProfile(null);\n          // No return here, let finally handle loading state\n          console.error(\"ERRORRRR\");\n\n        } else {\n          console.log(\"AuthContext: Session fetched:\", currentSession);\n          setSession(currentSession);\n          setUser(currentSession?.user ?? null);\n\n          if (currentSession?.user) {\n            console.log(\"AuthContext: User found in session, fetching profile for ID:\", currentSession.user.id);\n            const { data: profileData, error: profileError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', currentSession.user.id)\n              .maybeSingle(); // Use maybeSingle() instead of single()\n\n            if (profileError) {\n              setProfile(null);\n\n              if (profileError.code !== 'PGRST116') {\n                  console.error(\"ERRORRRR\");\n              }\n            } else {\n              console.log(\"AuthContext: Profile fetched:\", profileData);\n              setProfile(profileData); // profileData will be null if no row found, which is fine\n            }\n          } else {\n            console.log(\"AuthContext: No user in session, setting profile to null.\");\n            setProfile(null); // No user, no profile\n          }\n        }\n      } catch (err: any) {\n          console.error(\"AuthContext: Error in fetchSessionAndProfile try block:\", err);\n          // Reset states on catch\n          setSession(null);\n          setUser(null);\n          setProfile(null);\n      } finally {\n        console.log(\"AuthContext: fetchSessionAndProfile finally block reached. Setting loading to false.\");\n        setLoading(false); // Set loading false regardless of success/error\n      }\n    };\n\n    fetchSessionAndProfile();\n\n    // Listen for auth state changes\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (_event, newSession) => {\n        console.log(\"AuthContext: onAuthStateChange triggered. Event:\", _event);\n        console.log(\"AuthContext: New session:\", newSession);\n        setSession(newSession);\n        setUser(newSession?.user ?? null);\n\n        if (newSession?.user) {\n           console.log(\"AuthContext: User found in new session, fetching profile for ID:\", newSession.user.id);\n           try {\n              // Fetch profile data again on auth change\n              const { data: profileData, error: profileError } = await supabase\n                 .from('profiles')\n                 .select('*')\n                 .eq('id', newSession.user.id)\n                 .maybeSingle(); // Use maybeSingle() here too\n\n              if (profileError) {\n                console.error(\"AuthContext: Error fetching profile on auth change:\", profileError);\n                setProfile(null);\n              } else {\n                console.log(\"AuthContext: Profile fetched on auth change:\", profileData);\n                setProfile(profileData);\n                console.log(\"AuthContext: Reached point AFTER profile fetch attempt in onAuthStateChange.\"); \n              }\n           } catch (profileFetchError) {\n              console.error(\"AuthContext: Uncaught error fetching profile on auth change:\", profileFetchError);\n              setProfile(null);\n           }\n        } else {\n            console.log(\"AuthContext: No user in new session, setting profile to null.\");\n            setProfile(null);\n        }\n        // Explicitly set loading false AFTER state updates from auth change? Usually not needed.\n        // console.log(\"AuthContext: onAuthStateChange finished, setting loading false.\"); \n        // setLoading(false); \n      }\n    );\n\n    // Cleanup listener on unmount\n    return () => {\n      console.log(\"AuthContext: Unsubscribing from auth changes.\");\n      // Access the subscription property inside data\n      authListener?.data?.subscription?.unsubscribe();\n    };\n  }, [supabase]); // Dependency array includes supabase client\n\n  const signOut = async () => {\n    setLoading(true);\n    const { error } = await supabase.auth.signOut();\n    if (error) {\n      console.error(\"Error signing out:\", error);\n    }\n    // State updates will be handled by onAuthStateChange listener\n    // setLoading(false); // Listener will reset loading potentially\n  };\n\n  const value = {\n    session,\n    user,\n    profile,\n    loading,\n    signOut,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\n// Export a hook to easily use the context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAoBA,0CAA0C;AAC1C,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAGxD,SAAS,aAAa,EAAE,QAAQ,EAA2B;IAChE,MAAM,WAAW,CAAA,GAAA,gIAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IACvD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAsB;IAC3D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,QAAQ,GAAG,CAAC,oCAAoC,YAAY;QAE5D,wCAAwC;QACxC,MAAM,yBAAyB;YAC7B,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO,sCAAsC;YACxD,SAAS,OAAO,wCAAwC;YAExD,IAAI;gBACF,QAAQ,GAAG,CAAC;gBACZ,MAAM,EAAE,MAAM,EAAE,SAAS,cAAc,EAAE,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;gBACjG,QAAQ,GAAG,CAAC,8BAA8B;gBAC1C,IAAI,cAAc;oBAChB,QAAQ,KAAK,CAAC,wCAAwC;oBACtD,WAAW;oBACX,QAAQ;oBACR,WAAW;oBACX,mDAAmD;oBACnD,QAAQ,KAAK,CAAC;gBAEhB,OAAO;oBACL,QAAQ,GAAG,CAAC,iCAAiC;oBAC7C,WAAW;oBACX,QAAQ,gBAAgB,QAAQ;oBAEhC,IAAI,gBAAgB,MAAM;wBACxB,QAAQ,GAAG,CAAC,gEAAgE,eAAe,IAAI,CAAC,EAAE;wBAClG,MAAM,EAAE,MAAM,WAAW,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SACtD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,eAAe,IAAI,CAAC,EAAE,EAC/B,WAAW,IAAI,wCAAwC;wBAE1D,IAAI,cAAc;4BAChB,WAAW;4BAEX,IAAI,aAAa,IAAI,KAAK,YAAY;gCAClC,QAAQ,KAAK,CAAC;4BAClB;wBACF,OAAO;4BACL,QAAQ,GAAG,CAAC,iCAAiC;4BAC7C,WAAW,cAAc,0DAA0D;wBACrF;oBACF,OAAO;wBACL,QAAQ,GAAG,CAAC;wBACZ,WAAW,OAAO,sBAAsB;oBAC1C;gBACF;YACF,EAAE,OAAO,KAAU;gBACf,QAAQ,KAAK,CAAC,2DAA2D;gBACzE,wBAAwB;gBACxB,WAAW;gBACX,QAAQ;gBACR,WAAW;YACf,SAAU;gBACR,QAAQ,GAAG,CAAC;gBACZ,WAAW,QAAQ,gDAAgD;YACrE;QACF;QAEA;QAEA,gCAAgC;QAChC,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,SAAS,IAAI,CAAC,iBAAiB,CAC5D,OAAO,QAAQ;YACb,QAAQ,GAAG,CAAC,oDAAoD;YAChE,QAAQ,GAAG,CAAC,6BAA6B;YACzC,WAAW;YACX,QAAQ,YAAY,QAAQ;YAE5B,IAAI,YAAY,MAAM;gBACnB,QAAQ,GAAG,CAAC,oEAAoE,WAAW,IAAI,CAAC,EAAE;gBAClG,IAAI;oBACD,0CAA0C;oBAC1C,MAAM,EAAE,MAAM,WAAW,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SACrD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,MAAM,WAAW,IAAI,CAAC,EAAE,EAC3B,WAAW,IAAI,6BAA6B;oBAEhD,IAAI,cAAc;wBAChB,QAAQ,KAAK,CAAC,uDAAuD;wBACrE,WAAW;oBACb,OAAO;wBACL,QAAQ,GAAG,CAAC,gDAAgD;wBAC5D,WAAW;wBACX,QAAQ,GAAG,CAAC;oBACd;gBACH,EAAE,OAAO,mBAAmB;oBACzB,QAAQ,KAAK,CAAC,gEAAgE;oBAC9E,WAAW;gBACd;YACH,OAAO;gBACH,QAAQ,GAAG,CAAC;gBACZ,WAAW;YACf;QACA,yFAAyF;QACzF,mFAAmF;QACnF,sBAAsB;QACxB;QAGF,8BAA8B;QAC9B,OAAO;YACL,QAAQ,GAAG,CAAC;YACZ,+CAA+C;YAC/C,cAAc,MAAM,cAAc;QACpC;IACF,GAAG;QAAC;KAAS,GAAG,4CAA4C;IAE5D,MAAM,UAAU;QACd,WAAW;QACX,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAC7C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,sBAAsB;QACtC;IACA,8DAA8D;IAC9D,gEAAgE;IAClE;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAGO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file:///Users/joaosantos/Documents/Tutoring/src/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport \"./globals.css\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"TutorHub\",\n  description: \"Connecting Students and Tutors for Success\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={inter.className}>\n        <AuthProvider>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <TopNav />\n            <main className=\"pt-16\">\n              {children}\n            </main>\n          </ThemeProvider>\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;AAGA;AACA;;;;;;;;;;;;AAKO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,8OAAC;QAAK,MAAK;QAAK,wBAAwB;kBACtC,cAAA,8OAAC;YAAK,WAAW,yIAAA,CAAA,UAAK,CAAC,SAAS;sBAC9B,cAAA,8OAAC,8HAAA,CAAA,eAAY;0BACX,cAAA,8OAAC;oBACC,WAAU;oBACV,cAAa;oBACb,YAAY;oBACZ,yBAAyB;;sCAEzB,8OAAC,gIAAA,CAAA,SAAM;;;;;sCACP,8OAAC;4BAAK,WAAU;sCACb;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOf","debugId":null}}]
}